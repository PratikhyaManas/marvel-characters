# ============================================================================
# CI Workflow: Continuous Integration for Marvel Characters MLOps Project
# ============================================================================
# Purpose: Validate code quality, run tests, and enforce coding standards
# Trigger: Automatically runs on pull requests targeting the main branch
# 
# Workflow Steps:
# 1. Checkout code with full git history
# 2. Tag version from version.txt
# 3. Install uv package manager
# 4. Install project dependencies with test extras
# 5. Run pre-commit hooks (linting, formatting, type checks)
# 6. Execute pytest test suite
# ============================================================================

name: CI

# Trigger Configuration: Run workflow on pull requests to main branch
on:
  pull_request:
    branches:
      - main

jobs:
  # Job: Run pytest and quality checks
  pytest_and_checks:
    runs-on: ubuntu-latest  # Use latest Ubuntu runner for Linux compatibility
    steps:
      # Step 1: Checkout source code with full git history for tagging operations
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          # Fetch all history for all branches and tags (required for git operations)
          fetch-depth: 0
          # Checkout the PR branch (head ref)
          ref: ${{ github.head_ref }}

      # Step 2: Create git tag from version.txt for release tracking
      - name: Git tag from version.txt
        run: |
          echo "VERSION=$(cat version.txt)"
          # Extract version and create git tag
          VERSION=$(cat version.txt)
          git tag $VERSION

      # Step 3: Install uv - modern Python package manager (faster than pip)
      - name: Install uv
        uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 #v5.4.1

      # Step 4: Install project dependencies including test extras
      - name: Install the dependencies
        run: |
          # Sync dependencies from pyproject.toml with test extras (pytest, coverage, etc.)
          uv sync --extra test

      # Step 5: Run pre-commit hooks for code quality validation
      - name: Run pre-commit checks
        run: |
          # Execute all pre-commit hooks: linting, formatting, type checks, etc.
          uv run pre-commit run --all-files

      # Step 6: Execute pytest test suite
      - name: run pytest
        run: |
          # Run all tests except those marked with 'ci_exclude' marker
          uv run pytest -m "not ci_exclude"
